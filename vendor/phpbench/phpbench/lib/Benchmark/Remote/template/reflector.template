<?php

namespace PhpBench;

$bootstrap = '{{ bootstrap }}';
$class = '{{ class }}';
$file = '{{ file }}';

if ($bootstrap) {
    call_user_func(function () use ($bootstrap) {
        require_once($bootstrap);
    });
}

require_once($file);

$classHierarchy = class_parents($class);
array_unshift($classHierarchy, $class);

foreach ($classHierarchy as $class) {
    $refl = new \ReflectionClass($class);
    $metadata = array(
        'class' => $class,
        'namespace' => $refl->getNamespaceName(),
        'abstract' => $refl->isAbstract(),
        'methods' => array(),
        'interfaces' => array(),
        'comment' => $refl->getDocComment()
    );

    foreach ($refl->getMethods() as $methodRefl) {
        $comment = $methodRefl->getDocComment();
        $metadata['methods'][$methodRefl->getName()] = array(
            'class' => $class,
            'name' => $methodRefl->getName(),
            'comment' => $comment,
            'static' => $methodRefl->isStatic(),
        );
    }

    foreach ($refl->getInterfaces() as $interfaceRefl) {
        $metadata['interfaces'][] = $interfaceRefl->getName();
    }
    $metadatas[] = $metadata;
}

// in the future we should return also the parent classes
echo serialize($metadatas);
exit(0);
